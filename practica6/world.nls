
to initialize-random-world
  initialize-world [] [] []
end

to initialize-world [markets-to-load products-to-load producers-to-load]
  Initialize-product-selection-strategy-table
  
  ifelse length markets-to-load > 0 and length products-to-load > 0 and length producers-to-load > 0 [
    ;; Loaded world
    show "Loading world..."
    foreach markets-to-load [
      create-markets 1 [
        set xcor item 0 ?1
        set ycor item 1 ?1
        set influence-radius item 2 ?1
        set market-day-tick item 3 ?1
        set shape "house"
      ]
    ]
    foreach products-to-load [
      create-products 1 [
        set template-product-id item 0 ?1
        set units-per-tick ( get-template-units_per_tick template-product-id )
        set xcor item 1 ?1
        set ycor item 2 ?1
        set shape "plant"
      ]
    ]
    foreach producers-to-load [
      create-producers 1 [
        set id item 0 ?1
        set xcor item 1 ?1
        set ycor item 2 ?1
        set product-selection-strategy item 3 ?1
        set product-difficulty-table get-difficulty-table item 4 ?1
        set shape "person"
        
        initialize-producer
      ]
    ]
  ] [
    ;; Random world
    show "Generating a random world..."
  ]
end

to load-world-file
  ifelse length world-csv-file > 0 [
    clear-all
    load-template-products
    let markets-to-load load-markets
    let products-to-load load-products
    let producers-to-load load-producers
    initialize-world markets-to-load products-to-load producers-to-load
  ] [
    show "variable [world-csv-file] cannot be empty."
  ]
end

to save-world-file
  show "Not implemented yet."
end

to clear-world-file
  set world-csv-file ""
end

to load-template-products
  initialize-template-products-table
  file-open (word world-csv-file "/" "template_products.csv")
  while [ not file-at-end? ] [
    let row csv:from-row file-read-line
    if is-number? item 0 row [
      add-template-product row
      show (word "Loaded product [" item 1 row "]")
    ]
  ]
  file-close-all
end

to-report load-markets
  ;; report csv:from-file (word world-csv-file "/" "markets.csv")
  report load-raw-csv "markets"
end

to-report load-products
  ;; report csv:from-file (word world-csv-file "/" "products.csv")
  report load-raw-csv "products"
end

to-report load-producers
  let producers-to-load []
  ifelse file-exists? (word world-csv-file "/" "producers.csv") [
    file-open (word world-csv-file "/" "producers.csv")
    while [ not file-at-end? ] [
      let row csv:from-row file-read-line
      if is-number? item 0 row [
        let producer-conf []
        let producer-id item 0 row
        let producer-parameters load-producer-product-parameters producer-id
        set producer-conf lput producer-id producer-conf
        set producer-conf lput ( item 1 row ) producer-conf
        set producer-conf lput ( item 2 row ) producer-conf
        set producer-conf lput ( item 3 row ) producer-conf
        set producer-conf lput ( load-producer-product-parameters producer-id ) producer-conf
        set producers-to-load lput producer-conf producers-to-load
        
        ;; Ensure not loosing the file-handle while iterating the list
        file-open (word world-csv-file "/" "producers.csv")
      ]
    ]
    file-close-all
    report producers-to-load
  ] [
    show (word world-csv-file "/" "producers.csv")
  ]
end

to-report load-producer-product-parameters [producer-id]
  let product-parameters []
  file-open (word world-csv-file "/" "producers_product_parameters.csv")
  while [ not file-at-end? ] [
    let row csv:from-row file-read-line
    if is-number? item 0 row and item 0 row = producer-id [
      let product-parameter []
      set product-parameter lput ( item 1 row ) product-parameter
      set product-parameter lput ( item 2 row ) product-parameter
      set product-parameters lput product-parameter product-parameters
    ]
  ]
  file-close
  report product-parameters
end

to-report load-raw-csv [file]
  let csv-data []
  file-open (word world-csv-file "/" file ".csv")
  while [ not file-at-end? ] [
    let row csv:from-row file-read-line
    if is-number? item 0 row [
      set csv-data lput row csv-data
    ]
  ]
  file-close-all
  report csv-data
end