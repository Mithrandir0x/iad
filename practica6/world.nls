
to load-world-file
  ;; ifelse length world-csv-file > 0 [
  ;;   clear-all
  ;;   file-open world-csv-file
  ;;   while [ not file-at-end? ] [
  ;;     let row csv:from-row file-read-line
  ;;     if length row = 2 [
  ;;       if is-number? item 0 row [
  ;;         set ants-to-load lput row ants-to-load
  ;;       ]
  ;;     ]
  ;;   ]
  ;;   file-close
  ;;   show (word "Loaded world from [" world-csv-file "] with [" length ants-to-load "] ants")
  ;;   set population length ants-to-load
  ;;   initialize-world ants-to-load
  ;; ] [
  ;;   show "variable [world-csv-file] cannot be empty."
  ;; ]
end

to save-world-file
  ;; ifelse length world-csv-file > 0 [
  ;;   let data []
  ;;   set data lput (list ";xcor" "ycor") data
  ;;   ask ants [
  ;;     let ant_pos []
  ;;     set ant_pos lput xcor ant_pos
  ;;     set ant_pos lput ycor ant_pos
  ;;     set data lput ant_pos data
  ;;   ]
  ;;   csv:to-file world-csv-file data
  ;;   show (word "Saved world [" world-csv-file "] with [" length but-first data "] ants")
  ;; ] [
  ;;   show "variable [world-csv-file] cannot be empty."
  ;; ]
end

to clear-world-file
  ;; set world-csv-file ""
end

to load-template-products
  file-open (word world-csv-file "template_products.csv")
  while [ not file-at-end? ] [
    let row csv:from-row file-read-line
    if is-number? item 0 row [
      
    ]
  ]
end

to load-markets
end

to load-products
end

to load-producers
end
