
breed [ producers producer ]

producers-own [
  id
  product-difficulty-table
  product-in-process
  stash
  product-selection-strategy
  energy

  current-messages
  next-messages
]

globals [
  PRODUCT-SELECTION-STRATEGY-TABLE
]

to Initialize-product-selection-strategy-table
  set PRODUCT-SELECTION-STRATEGY-TABLE table:make
  table:put PRODUCT-SELECTION-STRATEGY-TABLE 1 task select-max-ratio-product
  table:put PRODUCT-SELECTION-STRATEGY-TABLE 2 task select-easiest-to-produce-product
  table:put PRODUCT-SELECTION-STRATEGY-TABLE 3 task select-most-abundant-product
end

to producer-run
  ifelse not empty? current-messages
  [
    process_rfqs
  ]
  [
    producer-produce-product
  ]
  set energy energy - 1  
end

to producer-produce-product
  let selected-product-id select-product

  if selected-product-id != -1 [
    set product-in-process selected-product-id
    ;;let quantity produce-product selected-product-id
    stash-product selected-product-id produce-product selected-product-id
  ]
end

to initialize-producer
  set stash table:make
end

to-report produce-product [product-id]
  let upt get-template-units_per_tick product-id
  let dif get-difficulty product-id
  show (word "Producing product [" product-id "]:[" get-template-name product-id "] units-per-tick [" upt "] difficulty [" dif "] upt * dif [" round ( upt * dif ) "]")
  report round ( upt * dif )
end

to stash-product [product-id add-quantity]
  let current-quantity 0
  if table:has-key? stash product-id [
    set current-quantity table:get stash product-id
  ]
  show (word "Stashing product [" product-id "]:[" get-template-name product-id "] current-quantity [" current-quantity "] add-quantity [" add-quantity "]")
  table:put stash product-id ( current-quantity + add-quantity )
end

to-report get-difficulty-table [product-producer-def]
  let difficulty-table table:make
  foreach product-producer-def [
    table:put difficulty-table item 0 ?1 item 1 ?1
  ]
  report difficulty-table
end

to-report get-difficulty [product-id]
  report table:get product-difficulty-table product-id
end

to-report get-product-quantity [product-id]
  ifelse table:has-key? stash product-id [
    report table:get stash product-id
  ] [
    report 0
  ]
end

to process_rfqs
  foreach current-messages[ ;; sender kind (template-product-id quantity)
    if item 1 ? = "RFQ" and product-in-process = item 0  item 2 ?
    [ 
     send_offer item 0 ? (create_offer item 0  item 2 ?)
    ]
  ]
end

to-report create_offer[tp-id ]
  ;; rfq : product unit-price quantity
  report (list tp-id (calc_unit_price tp-id) (get-product-quantity tp-id))
end

to send_offer [ recipient message ]
  send_message recipient self "OFFER" message
end

;; Product Selection Strategies

to-report select-product
  let selected-product-id -1
  ifelse table:has-key? PRODUCT-SELECTION-STRATEGY-TABLE product-selection-strategy [
    let product-selection-strategy-task table:get PRODUCT-SELECTION-STRATEGY-TABLE product-selection-strategy
    ask runresult product-selection-strategy-task [
      set selected-product-id template-product-id
    ]
    show (word "Selected product [" selected-product-id "]:[" get-template-name selected-product-id "]")
  ] [
    show "No product-selection-strategy set."
  ]
  report selected-product-id
end

to-report select-max-ratio-product
  let table product-difficulty-table
  let best-product max-n-of 1 products [
    (1 - ( table:get table template-product-id )) * units-per-tick
  ]
  report best-product
end

to-report select-easiest-to-produce-product
  let table product-difficulty-table
  let best-product max-n-of 1 products [
    1 - (table:get table template-product-id)
  ]
  report best-product
end

to-report select-most-abundant-product
  let table product-difficulty-table
  let best-product max-n-of 1 products [
    units-per-tick
  ]
  report best-product
end

to-report calc_unit_price[ tp-id ] 
  let _price (get-difficulty tp-id) * (get_product_units_per_tick tp-id)
  report _price / (get-product-quantity tp-id)
end