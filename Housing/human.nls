breed[ humans human ]

humans-own[
  life
  money
  num-houses
  can-build
  social-status
  
  current-messages
  next-messages
]


to initialize_human
  set shape "face neutral"
  set color yellow
  setxy random-xcor random-ycor
  set can-build false
  set social-status 1 + random SOCIAL-STATUSES
  set money (SMI * random 100) * social-status
  set life (random 500) + 500

  set current-messages []
  set next-messages []
end

to initialize_son [father]
  set shape "face neutral"
  set color yellow
  setxy [xcor] of father [ycor] of father
  set can-build false
  set social-status [social-status] of father
  set money 0.25 * [money] of father
  set life (random 500) + 500

  set current-messages []
  set next-messages []
end

to human_behave
  if length current-messages > 0 [
    evaluate_accept_offers
    evaluate_rfqs
  ]
  
  ifelse ticks mod 2 = 0
  ;; this is a fix to avoid building and buiying on the same tick
  ;; both of them are performed async so it could be that 
  ;; both are produced avoiding the rule MAX-HOUSES-IN-PROPERTY
  [
    if MAX-HOUSES-IN-PROPERTY > num-houses [
      buy_houses
    ]
  ]
  [
    if MAX-HOUSES-IN-PROPERTY > num-houses [
      build_houses
    ]
  ]
  
  update_shape
  human_update_color
  set life life - 1
  if num-houses = 0
  [ set life life + HOMELESS-LIFE-EXPECTANCY  ]
  walk
end

to walk
  if money > 0
  [
    set money money - IPC
    fd 1
    ;; rotates?
    if random 1 = 1
    [ ;; where?
      ifelse random 1 = 1
      [ right 90 ]
      [ left 90 ]
    ]
  ]
end



to human_update_color
  ifelse num-houses = 0 
  [ set color yellow ]
  [ ifelse num-houses = 1
    [ set color blue ]
    [ ifelse num-houses = 2
      [ set color magenta ]
      [ set color black ]
    ]
  ]
  ;;set color scale-color green money (max [money] of humans) (min [money] of humans)
end

to update_shape
  ifelse money <= 0 
  [ set shape "face sad" ]
  [
    ifelse num-houses = 0
    [ set shape "face neutral"]
    [ set shape "face happy"]
  ]
end


to-report affordable_houses
  report one-of houses in-radius 5 with [owner = nobody and base-price < [money] of myself]
end

to-report buyable_houses
  report houses in-radius 5 with [owner != nobody and calc_buyable_base_price < [money] of myself]
end

to buy_houses
  let affordable affordable_houses
  ifelse affordable != nobody
  [
    do_buy_house affordable
  ]
  [
    let buyable buyable_houses
    if buyable != nobody [
      let owners [ (list owner (house who) ( calc_owned_house_rfq_price myself (house who) ) ) ] of buyable
      if length owners > 0 [
        foreach owners [
          ; recipient sender RFQ [ house-agent price ]
          send_message (item 0 ?) (human who) "RFQ" (list (item 1 ?) (item 2 ?))
        ]
      ]
    ]
  ]
end

to do_buy_house [ affordable ]
  set MONITOR-HOUSES-BOUGHT MONITOR-HOUSES-BOUGHT + 1
  show (word self " buys " affordable " at " [patch-here] of affordable " for " [base-price] of affordable " â‚¬")
  ;; human asks house to add some parameters
  ask affordable[
    ;; house is empty if human posesses another house
    if [num-houses = 0] of myself [ 
      set empty false 
    ]
    set owner myself
  ]
  
  ;; adds the price to the list
  new_house_bought [base-price] of affordable
  
  set money money - [base-price] of affordable
  set num-houses num-houses +  1
end

to evaluate_rfqs
  let rfq-messages filter [ message_get_kind ? = "RFQ" ] current-messages
  if length rfq-messages > 0 [
    ; first strategy of both ones
    let accepted-rfq reduce [
      ifelse-value (item 1 message_get_content ?1 >= item 1 message_get_content ?2) [?1] [?2]
    ] rfq-messages
    ; sender recipient ACCEPT-OFFER [ house-agent price ]
    send_message (message_get_sender accepted-rfq) (human who) "ACCEPT-OFFER" (message_get_content accepted-rfq)
  ]
end

to evaluate_accept_offers
  let messages filter [ message_get_kind ? = "ACCEPT-OFFER" ] current-messages
  if length messages > 0 [
    let accepted-offer reduce [
      ifelse-value (item 1 message_get_content ?1 < item 1 message_get_content ?2) [?1] [?2]
    ] messages
    do_buy_house (item 0 (message_get_content accepted-offer))
  ]
end

to build_houses
  let pr-required calc_money_build_house
  
  ;; required SMI
  ;;let pr-required SMI * HOUSE-CONSTRUCTION-REQUIRED-SMI
  ;; required IPC%
  ;;set pr-required pr-required + (pr-required * IPC * 0.01)
  
  if money > pr-required [ set can-build true]
end

