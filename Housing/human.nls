breed[ humans human ]

humans-own[
  life ;;
  money ;;
  base-home ;; the house in which human lives
  num-houses ;; total amount of houses
  can-build ;; if the human can build, deprecated
  social-status ;; the social status
  father ;; the father
  eloquence
  expertise
  can-procreate
]


to initialize_human
  set shape "face neutral"
  set color yellow
  setxy random-xcor random-ycor
  set can-build false
  set social-status 1 + random SOCIAL-STATUSES
  set money (SMI * random 100) * social-status
  set life (random 500) + 500
  set eloquence random 50
  set expertise 0
  set father nobody
  set base-home nobody
  set can-procreate true
end

to initialize_son [_father]
  set father _father
  set shape "face neutral"
  set color yellow
  setxy [xcor] of father [ycor] of father
  set can-build false
  
  ;; the social status is based on father's social status
  ;; it can increase or decrease 1
  ifelse [social-status = 0] of father
  [ ;; social status may increase 1
    set social-status ([social-status] of father) + random 2
  ]
  [
    ifelse [social-status = SOCIAL-STATUSES] of father
    [ ;; social status may decrease 1
      set social-status ([social-status] of father) - random 2
    ]
    [;; social status may increase or decrease 1
      set social-status ([social-status] of father) + ( 1 - random 3)
      
    ]
    
  ]
  
  set money 0.25 * [money] of father
  set life (random 500) + 500
  set eloquence random 50
  set expertise 0
  set base-home nobody
  set can-procreate true
end

to human_behave
  set life life - 1
  if num-houses = 0
  [ set life life + HOMELESS-LIFE-EXPECTANCY  ]
  walk
  
  if (num-houses > 0 or HOMELESS-CAN-BUILD) and num-houses < MAX-HOUSES-IN-PROPERTY
  [
    if any? houses in-radius RADIUS and [free] of patch-here
    [
      let needed check_construction_prices
      if money > needed [ mediator_add_construction patch-here self needed ]
    ]
  ]
  
end


to walk
  if money > 0
  [
    fd 1
    ;; rotates?
    if random 1 = 1
    [ ;; where?
      ifelse random 1 = 1
      [ right 90 ]
      [ left 90 ]
    ]
  ]
end


to human_update_color
  ifelse num-houses = 0 
  [ set color yellow ]
  [ ifelse num-houses = 1
    [ set color blue ]
    [ ifelse num-houses = 2
      [ set color magenta ]
      [ set color black ]
    ]
  ]
  ;;set color scale-color green money (max [money] of humans) (min [money] of humans)
end

to update_shape
  ifelse money <= 0 
  [ set shape "face sad" ]
  [
    ifelse num-houses = 0
    [ set shape "face neutral"]
    [ set shape "face happy"]
  ]
end

